{"version":3,"sources":["utils.js","useTodos.js","Todo.js","App.js","index.js"],"names":["LOCAL_STORAGE_TODOS_KEY","getTodosFromToken","JSON","parse","localStorage","getItem","useTodos","useState","todos","setTodos","todoCotentRef","useRef","filterValue","setFilterValue","AddTodo","inputTodo","current","value","id","uuidv4","content","isDone","useEffect","setItem","stringify","setTodosToken","editTodo","useCallback","newTodo","map","todo","handleFilter","e","selectedItem","target","innerText","filter","handleAddTodo","handleKeyDown","key","handleDeleteTodo","handleToggleIsDone","handleClearIsDoneTodos","handleUnfinishedCount","EditInput","styled","input","Button","button","Todo","isUpdating","setIsUpdating","inputRef","EditTodo","className","ref","onKeyDown","type","onClick","defaultChecked","htmlFor","Title","h1","Todolist","div","Filters","InputContainer","Input","App","placeholder","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb543808.chunk.js","sourcesContent":["// 設定儲存到 localStorage 的 key 的名稱\r\nconst LOCAL_STORAGE_TODOS_KEY = 'todos';\r\n\r\n// 將 todos  儲存在 localStorage\r\nexport const setTodosToken = (todos) => {\r\n  localStorage.setItem(LOCAL_STORAGE_TODOS_KEY, JSON.stringify(todos));\r\n};\r\n// 從 localStorage 中拿取 todos\r\nexport const getTodosFromToken = () => {\r\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_TODOS_KEY));\r\n};\r\n","import { useState, useEffect, useRef, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { setTodosToken, getTodosFromToken } from './utils';\n\nexport default function useTodos() {\n  // 儲存 todos 的狀態，\n  const [todos, setTodos] = useState([]);\n\n  // 儲存 input 欄中輸入的值\n  const todoCotentRef = useRef();\n\n  // 儲存 filter 的狀態，預設值為 todos\n  const [filterValue, setFilterValue] = useState(todos);\n\n  // 初始化 todos：如果 localStorage 有 todos 的值，拿取 localStorage 中的 todos\n  useEffect(() => {\n    if (getTodosFromToken()) {\n      setTodos(getTodosFromToken());\n    }\n  }, []);\n\n  // todos 的狀態有變化時，儲存到 localStorage，並更新 Filter 的狀態\n  useEffect(() => {\n    setTodosToken(todos);\n    setFilterValue(todos);\n  }, [todos]);\n\n  // 新增 todo ：\n  function AddTodo() {\n    // 拿取 input 的值\n    const inputTodo = todoCotentRef.current.value;\n    // 如果為空，不進行任何動作\n    if (inputTodo === '') return;\n    // 若有值，將 input 的值新增成一筆 todo 到 setTodos, 以更新 todos\n    setTodos([\n      {\n        id: uuidv4(),\n        content: inputTodo,\n        isDone: false,\n      },\n      ...todos,\n    ]);\n    // 然後將 input 欄位清空\n    todoCotentRef.current.value = null;\n  }\n\n  // handleAddTodo: 執行 AddTodo()\n  const handleAddTodo = () => {\n    AddTodo();\n  };\n\n  // 當按下'Enter' 鍵，且 input 欄位中的值不為空時，執行 AddTodo()\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && todoCotentRef.current.value !== '') {\n      AddTodo();\n    }\n  };\n\n  // 編輯 todo:\n  const editTodo = useCallback(\n    (newTodo) => {\n      // 用 map 處理每一個 todo：\n      // 新 todo 的 id 與原有的 todo id 相同時，新 todo 取代此 todo， 其餘的 todo 不變  =>\n      setTodos(todos.map((todo) => (todo.id === newTodo.id ? newTodo : todo)));\n    },\n    // dependency： 當偵測到 todos 改變時才再重新渲染\n    [todos]\n  );\n\n  // 刪除 todo：\n  const handleDeleteTodo = (id) => {\n    // 帶入要刪除的 todo 的 id，\n    // 用 filter 留下 todo 的 id 不等於 id 的 todo 們，\n    // 用 setTodos 更新 todos 的資料\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  // 刪除已完成的 todo：\n  const handleClearIsDoneTodos = () => {\n    // 用 filter 留下 isDone 狀態為 false 的 todo 們，\n    // 用 setTodos 更新 todo 的資料\n    setTodos(todos.filter((todo) => !todo.isDone));\n  };\n\n  // 將 todo 狀態 '未完成' 改為 '已完成'；'已完成' 改為 '未完成'：\n  const handleToggleIsDone = (id) => {\n    // 帶入要修改的 todo 的 id，並用 setTodos  更新 todos 的資料\n    setTodos(\n      // 用 map 處理每一個 todo：\n      todos.map((todo) => {\n        // 若不是要修改 id 的 todo  => 不做任何操作；\n        if (todo.id !== id) return todo;\n        // 要修改的 todo => 使用 ES6 解構賦值將 todo 的其他資料保持不變， 'isDone' 狀態改為當前相反的狀態\n        return {\n          ...todo,\n          isDone: !todo.isDone,\n        };\n      })\n    );\n  };\n\n  // 計算未完成 todo 的數量：\n  const handleUnfinishedCount = () =>\n    // 用 filter 留下 isDone 狀態為 false 的 todo 們，\n    // 用 length 算出未完成 todo 總數\n    todos.filter((todo) => !todo.isDone).length;\n\n  // 篩選 todos：\n  const handleFilter = useCallback(\n    (e) => {\n      // 取出篩選 button 的 innerText\n      const selectedItem = e.target.innerText;\n      // 如果篩選 '全部' => todos\n      if (selectedItem === '全部') {\n        setFilterValue(todos);\n      }\n      // 如果篩選 '已完成' => 用 filter 選出 todo 狀態為 isDone 為true 的 todo， 以 setFilterValue 更新 filterValue\n      if (selectedItem === '已完成') {\n        setFilterValue(todos.filter((todo) => todo.isDone));\n      }\n      // 如果篩選 '未完成' => 用 filter 選出 todo 狀態為 isDone 為 false 的 todo， 以 setFilterValue 更新\n      if (selectedItem === '未完成') {\n        setFilterValue(todos.filter((todo) => !todo.isDone));\n      }\n    },\n    // dependency： 當偵測到 todos 改變時才再重新渲染\n    [todos]\n  );\n\n  return {\n    filterValue,\n    todoCotentRef,\n    AddTodo,\n    handleAddTodo,\n    handleKeyDown,\n    handleDeleteTodo,\n    handleToggleIsDone,\n    handleClearIsDoneTodos,\n    handleFilter,\n    editTodo,\n    handleUnfinishedCount,\n  };\n}\n","import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst EditInput = styled.input`\r\n  font-size: 14px;\r\n  padding: 1px;\r\n  border: solid 0.2px rgba(0, 0, 0, 0.1);\r\n  border-radius: 5px;\r\n  outline: none;\r\n`;\r\n\r\nconst Button = styled.button``;\r\n\r\nexport default function Todo({\r\n  //從 App.js 傳入 props\r\n  todo,\r\n  handleDeleteTodo,\r\n  handleToggleIsDone,\r\n  editTodo,\r\n}) {\r\n  // 儲存是否正在 edit 的狀態\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n  // // 儲存 input 欄中輸入的值\r\n  const inputRef = useRef();\r\n\r\n  // 點擊 '刪除' 後:\r\n  const handleDeleteClick = () => {\r\n    // 執行 handleDeleteTodo(), 並帶入參數:todo 的 id\r\n    handleDeleteTodo(todo.id);\r\n  };\r\n\r\n  // 點擊 'check box' 按鈕後，執行 handleToggleIsDone(), 並帶入參數:todo 的 id\r\n  const handleToggleClick = () => {\r\n    handleToggleIsDone(todo.id);\r\n  };\r\n\r\n  // 點擊 '編輯' 後，更新 isUpdating 的編輯狀態為 true\r\n  const handleEditClick = () => {\r\n    setIsUpdating(true);\r\n  };\r\n\r\n  // 編輯 todo：\r\n  const EditTodo = () => {\r\n    // 如果編輯的 input 欄位沒有值 => isUpdating 狀態更新為 false\r\n    if (!inputRef.current.value) {\r\n      return setIsUpdating(false);\r\n    }\r\n    // 有值時，執行 editTodo()，利用 ES6 解構賦值將 todo 的其他資料保持不變， 'content' 狀態改為編輯的 input 欄位輸入的值\r\n    editTodo({\r\n      ...todo,\r\n      content: inputRef.current.value,\r\n    });\r\n\r\n    //  將 isUpdating 狀態更新為 false\r\n    setIsUpdating(false);\r\n  };\r\n\r\n  // 點擊 '修改完成' 後，執行 EditTodo()\r\n  const handleFinishedEditClick = () => {\r\n    EditTodo();\r\n  };\r\n\r\n  // 編輯欄按下 'Enter' 鍵後，執行 EditTodo()\r\n  const handleKeyDown = (e) => {\r\n    // 若按下的鍵非 'Enter'=> return\r\n    if (e.key !== 'Enter') return;\r\n    // 若為'Enter',執行 EditTodo()\r\n    EditTodo();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      key={todo.id}\r\n      className=\"todo list-group-item list-group-item-action d-flex justify-content-between align-items-center\"\r\n    >\r\n      <div className=\"todo__content-wrapper custom-control custom-checkbox\">\r\n        {/* 正在 edit 的狀態為 true 時，顯示編輯的 input 欄位 */}\r\n        {/* 否則，顯示 todo */}\r\n        {isUpdating ? (\r\n          <EditInput ref={inputRef} onKeyDown={handleKeyDown}></EditInput>\r\n        ) : (\r\n          <>\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"custom-control-input\"\r\n              id={todo.id}\r\n              // 點擊時，執行 handleToggleClick\r\n              onClick={handleToggleClick}\r\n              defaultChecked={todo.isDone ? 'checked' : ''}\r\n            />\r\n            <label\r\n              className=\"todo__content custom-control-label\"\r\n              htmlFor={todo.id}\r\n            >\r\n              {todo.content}\r\n            </label>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* edit 的狀態為 false 時，顯示'編輯' 按鈕}\r\n      {/* 否則，顯示 '修改完成' 按鈕 */}\r\n      {!isUpdating ? (\r\n        // 點擊按鈕時，執行 handleEditClick\r\n        <Button onClick={handleEditClick} className=\"todo-btns btn btn-info\">\r\n          編輯\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          // 點擊按鈕時，執行 handleFinishedEditClick\r\n          onClick={handleFinishedEditClick}\r\n          className=\"todo-btns btn btn-info\"\r\n        >\r\n          修改完成\r\n        </Button>\r\n      )}\r\n\r\n      <Button\r\n        // 點擊按鈕時，執行 handleDeleteClick\r\n        onClick={handleDeleteClick}\r\n        className=\"todo-btns btn btn-danger\"\r\n      >\r\n        刪除\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nTodo.propTypes = {\r\n  todo: PropTypes.object,\r\n  handleDeleteTodo: PropTypes.func,\r\n  handleToggleIsDone: PropTypes.func,\r\n  editTodo: PropTypes.func,\r\n};\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport useTodos from './useTodos';\nimport Todo from './Todo';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nconst Title = styled.h1`\n  margin-top: 10px;\n  text-align: center;\n`;\nconst Todolist = styled.div``;\nconst Filters = styled.div``;\nconst InputContainer = styled.div``;\nconst Input = styled.input``;\nconst Button = styled.button``;\n\nexport default function App() {\n  //從 useTodos.js 傳入 props\n  const {\n    filterValue,\n    todoCotentRef,\n    handleAddTodo,\n    handleKeyDown,\n    handleDeleteTodo,\n    handleToggleIsDone,\n    handleClearIsDoneTodos,\n    handleFilter,\n    editTodo,\n    handleUnfinishedCount,\n  } = useTodos();\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-lg-6\">\n            <Title>Todo List</Title>\n\n            {/* 輸入 input 的欄位，並且旁邊有'新增' 的按鈕 */}\n            <InputContainer className=\"input-group mb-3\">\n              <Input\n                ref={todoCotentRef}\n                type=\"text\"\n                className=\"input-todo form-control\"\n                placeholder=\"todo\"\n                //輸入後按下 'Enter'，新增 input 中的 todo\n                onKeyDown={handleKeyDown}\n              />\n              <div className=\"input-group-append\">\n                <Button\n                  // 點擊按鈕後， 新增 input 中的 todo\n                  onClick={handleAddTodo}\n                  className=\"btn btn-add btn-outline-secondary\"\n                >\n                  新增\n                </Button>\n              </div>\n            </InputContainer>\n\n            {/* 顯示 Todos 的內容  */}\n            <Todolist className=\"todos list-group\">\n              {filterValue.map((todo) => (\n                // 顯示每一個 todo\n                <Todo\n                  key={todo.id}\n                  todo={todo}\n                  handleDeleteTodo={handleDeleteTodo}\n                  handleToggleIsDone={handleToggleIsDone}\n                  editTodo={editTodo}\n                />\n              ))}\n            </Todolist>\n\n            {/* todos 的篩選功能 */}\n            <Filters className=\"info mt-1 d-flex justify-content-between align-items-center\">\n              <div>\n                <span className=\"uncomplete-count\">\n                  {handleUnfinishedCount()}\n                </span>\n                個未完成\n              </div>\n              <div className=\"options d-flex\">\n                <div className=\"active\" onClick={handleFilter} selected>\n                  全部\n                </div>\n                <div className=\"ml-2\" onClick={handleFilter}>\n                  未完成\n                </div>\n                <div className=\"ml-2\" onClick={handleFilter}>\n                  已完成\n                </div>\n              </div>\n              <div onClick={handleClearIsDoneTodos} className=\"clear-all\">\n                移除已完成待辦事項\n              </div>\n            </Filters>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nApp.propTypes = {\n  filterValue: PropTypes.array,\n  handleAddTodo: PropTypes.func,\n  handleKeyDown: PropTypes.func,\n  handleDeleteTodo: PropTypes.func,\n  handleToggleIsDone: PropTypes.func,\n  handleClearIsDoneTodos: PropTypes.func,\n  handleFilter: PropTypes.func,\n  editTodo: PropTypes.func,\n  handleUnfinishedCount: PropTypes.func,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}